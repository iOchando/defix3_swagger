/*
 * Swagger dasds - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.38
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Category} from '../model/Category';
import {Pet} from '../model/Pet';
import {Tag} from '../model/Tag';

/**
* Dasd service.
* @module api/DasdApi
* @version 1.0.11
*/
export class DasdApi {

    /**
    * Constructs a new DasdApi. 
    * @alias module:api/DasdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addPet operation.
     * @callback moduleapi/DasdApi~addPetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pet{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param {module:model/Pet} body Create a new pet in the store
     * @param {Number} id 
     * @param {String} name 
     * @param {module:model/Category} category 
     * @param {Array.<String>} photoUrls 
     * @param {Array.<module:model/Tag>} tags 
     * @param {module:model/String} status 
     * @param {module:api/DasdApi~addPetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addPet(body, id, name, category, photoUrls, tags, status, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addPet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addPet");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling addPet");
      }
      // verify the required parameter 'photoUrls' is set
      if (photoUrls === undefined || photoUrls === null) {
        throw new Error("Missing the required parameter 'photoUrls' when calling addPet");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling addPet");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling addPet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': id,'name': name,'category': category,'photoUrls': this.apiClient.buildCollectionParam(photoUrls, 'multi'),'tags': this.apiClient.buildCollectionParam(tags, 'multi'),'status': status
      };

      let authNames = ['petstore_auth'];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Pet;

      return this.apiClient.callApi(
        '/pet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}